package com.example.duelgraphimport android.os.Bundleimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.activity.enableEdgeToEdgeimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.material3.Scaffoldimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.tooling.preview.Previewimport com.example.duelgraph.data.DataSetimport com.example.duelgraph.ui.theme.DuelGraphThemeclass MainActivity : ComponentActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        enableEdgeToEdge()        setContent {            DuelGraphTheme {                val list = ArrayList<DataSet>()                list.add(DataSet("1", "2"))                list.add(DataSet("2", "4"))                list.add(DataSet("3", "6"))                list.add(DataSet("4", "2"))                list.add(DataSet("5", "9"))                list.add(DataSet("6", "1"))                list.add(DataSet("7", "0"))                list.add(DataSet("8", "5"))                list.add(DataSet("9", "9"))                list.add(DataSet("10", "15"))                DualGraph(list)            }        }    }}@Composablefun DualGraph(list: ArrayList<DataSet>) {    Scaffold(        modifier = Modifier.fillMaxSize()    ) {        Row(            modifier = Modifier.padding(it)                .fillMaxSize()        ) {            LineGraphCompose(                list,                modifier = Modifier.weight(0.8f)                    .fillMaxSize()            )            ScrollGraph(                list,                modifier = Modifier.weight(0.2f)                    .fillMaxSize()            )        }    }}@Preview(showBackground = true)@Composablefun GreetingPreview() {    DuelGraphTheme {        val list = ArrayList<DataSet>()        list.add(DataSet("1", "2"))        list.add(DataSet("1", "2"))        list.add(DataSet("1", "2"))        list.add(DataSet("1", "2"))        DualGraph(list)    }}